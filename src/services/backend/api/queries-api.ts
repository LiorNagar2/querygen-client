/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateQueryDto } from '../models';
// @ts-ignore
import { Query } from '../models';
// @ts-ignore
import { UpdateQueryDto } from '../models';
/**
 * QueriesApi - axios parameter creator
 * @export
 */
export const QueriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} dbId 
         * @param {CreateQueryDto} createQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerCreateQuery: async (dbId: string, createQueryDto: CreateQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbId' is not null or undefined
            assertParamExists('queriesControllerCreateQuery', 'dbId', dbId)
            // verify required parameter 'createQueryDto' is not null or undefined
            assertParamExists('queriesControllerCreateQuery', 'createQueryDto', createQueryDto)
            const localVarPath = `/database/{dbId}/queries`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQueryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dbId 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerGetQueries: async (dbId: string, page: number, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbId' is not null or undefined
            assertParamExists('queriesControllerGetQueries', 'dbId', dbId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('queriesControllerGetQueries', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('queriesControllerGetQueries', 'limit', limit)
            const localVarPath = `/database/{dbId}/queries`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerGetQuery: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('queriesControllerGetQuery', 'id', id)
            const localVarPath = `/database/{dbId}/queries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dbId 
         * @param {string} id 
         * @param {UpdateQueryDto} updateQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerUpdateQuery: async (dbId: string, id: string, updateQueryDto: UpdateQueryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dbId' is not null or undefined
            assertParamExists('queriesControllerUpdateQuery', 'dbId', dbId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('queriesControllerUpdateQuery', 'id', id)
            // verify required parameter 'updateQueryDto' is not null or undefined
            assertParamExists('queriesControllerUpdateQuery', 'updateQueryDto', updateQueryDto)
            const localVarPath = `/database/{dbId}/queries/{id}`
                .replace(`{${"dbId"}}`, encodeURIComponent(String(dbId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQueryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueriesApi - functional programming interface
 * @export
 */
export const QueriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} dbId 
         * @param {CreateQueryDto} createQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queriesControllerCreateQuery(dbId: string, createQueryDto: CreateQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Query>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queriesControllerCreateQuery(dbId, createQueryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} dbId 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queriesControllerGetQueries(dbId: string, page: number, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queriesControllerGetQueries(dbId, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queriesControllerGetQuery(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queriesControllerGetQuery(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} dbId 
         * @param {string} id 
         * @param {UpdateQueryDto} updateQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queriesControllerUpdateQuery(dbId: string, id: string, updateQueryDto: UpdateQueryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Query>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queriesControllerUpdateQuery(dbId, id, updateQueryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueriesApi - factory interface
 * @export
 */
export const QueriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueriesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} dbId 
         * @param {CreateQueryDto} createQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerCreateQuery(dbId: string, createQueryDto: CreateQueryDto, options?: any): AxiosPromise<Query> {
            return localVarFp.queriesControllerCreateQuery(dbId, createQueryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dbId 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerGetQueries(dbId: string, page: number, limit: number, options?: any): AxiosPromise<void> {
            return localVarFp.queriesControllerGetQueries(dbId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerGetQuery(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.queriesControllerGetQuery(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dbId 
         * @param {string} id 
         * @param {UpdateQueryDto} updateQueryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queriesControllerUpdateQuery(dbId: string, id: string, updateQueryDto: UpdateQueryDto, options?: any): AxiosPromise<Query> {
            return localVarFp.queriesControllerUpdateQuery(dbId, id, updateQueryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueriesApi - object-oriented interface
 * @export
 * @class QueriesApi
 * @extends {BaseAPI}
 */
export class QueriesApi extends BaseAPI {
    /**
     * 
     * @param {string} dbId 
     * @param {CreateQueryDto} createQueryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    public queriesControllerCreateQuery(dbId: string, createQueryDto: CreateQueryDto, options?: AxiosRequestConfig) {
        return QueriesApiFp(this.configuration).queriesControllerCreateQuery(dbId, createQueryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dbId 
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    public queriesControllerGetQueries(dbId: string, page: number, limit: number, options?: AxiosRequestConfig) {
        return QueriesApiFp(this.configuration).queriesControllerGetQueries(dbId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    public queriesControllerGetQuery(id: string, options?: AxiosRequestConfig) {
        return QueriesApiFp(this.configuration).queriesControllerGetQuery(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dbId 
     * @param {string} id 
     * @param {UpdateQueryDto} updateQueryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    public queriesControllerUpdateQuery(dbId: string, id: string, updateQueryDto: UpdateQueryDto, options?: AxiosRequestConfig) {
        return QueriesApiFp(this.configuration).queriesControllerUpdateQuery(dbId, id, updateQueryDto, options).then((request) => request(this.axios, this.basePath));
    }
}
